generator client {
  provider = "prisma-client"
  output   = "../shared/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model scrapedMangas {
  id                     String                  @id @db.Uuid
  mangaDexId             String                  @db.Uuid
  sourceId               String
  title                  String
  url                    String                  @unique
  altTitles              Json?
  description            String?
  coverUrl               String?
  author                 String[]
  artist                 String[]
  publicationDemographic PublicationDemographic?
  status                 MangaStatus?
  year                   Int?
  contentRating          ContentRating?
  tags                   String[]
  originalLanguage       String?
  vote                   Int                     @default(0)
  version                Int                     @default(1)
  createdAt              DateTime                @default(now()) @db.Timestamp(6)
  updatedAt              DateTime                @default(now()) @updatedAt @db.Timestamp(6)
  scrapedChapters        scrapedChapters[]
}

model scrapedChapters {
  id                 String         @id @db.Uuid
  mangaId            String         @db.Uuid
  sourceId           String
  url                String         @unique
  title              String?
  volume             String?
  chapter            String?
  translatedLanguage String?
  uploader           String?
  scanlationGroup    String?
  branch             String?
  publishedAt        String?
  createdAt          DateTime       @default(now()) @db.Timestamp(6)
  updatedAt          DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  scrapedMangas      scrapedMangas  @relation(fields: [mangaId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  scrapedPages       scrapedPages[]
}

model scrapedPages {
  id              String          @id @db.Uuid
  chapterId       String          @db.Uuid
  data            String[]
  createdAt       DateTime        @default(now()) @db.Timestamp(6)
  updatedAt       DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  scrapedChapters scrapedChapters @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Users {
  id           String         @id @db.Uuid
  email        String         @unique
  password     String
  username     String?
  role         UserRole       @default(user)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  MangaFollows MangaFollows[]
}

model MangaFollows {
  userId  String            @db.Uuid
  mangaId String            @db.Uuid
  status  MangaFollowStatus
  user    Users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, mangaId])
}

enum UserRole {
  user
  admin
}

enum PublicationDemographic {
  shounen
  shoujo
  josei
  seinen
}

enum MangaStatus {
  completed
  ongoing
  cancelled
  hiatus
}

enum ContentRating {
  safe
  suggestive
  erotica
  pornographic
}

enum MangaFollowStatus {
  reading
  onHold
  dropped
  planToRead
  completed
  rereading
}
